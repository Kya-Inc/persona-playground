{
    "metadata": {
        "video_id": "IXgzIgdZ6vU",
        "title": "Blockchain Research Seminar - October 23, 2107 - Vitalik Buterin",
        "link": "https://www.youtube.com/watch?v=IXgzIgdZ6vU",
        "duration": "1:12:02",
        "channel_name": "Tyler Wilson"
    },
    "transcript": {
        "0": "first of all good evening to everybody forgive me for right before reading first of all I would like to thank everybody for attending here today and making this event already a success although it's raining heavily out there within three hours were able to get full capacity without any advertisement of this series this also emphasizes and confirms the need for focused research in the area of blockchain technology the past four to five years has been proven to be a disruptive force in social direction in business economics law privacy and protection of human rights most of the work done in the blog saying in the past pretty much decade is mostly conducted in a decentralized way by individuals around the world and surprisingly universities at the global scale are ",
        "1": "still trying to catch up with this innovation in contrast to what traditionally has happened in other sectors of technology well what we're trying to do with this blockchain serious at fields instead of mathematics is to bridge this gap the aim of these seminars is not to present news about the blob same but they exclusively focus to research the challenges that need to be addressed as the technology matures morphs and widens its usability and applicability it would not do though only through presentations but through networking after each and every seminar our goal is to bring academics and national partners together to support disciplinary research across the GTA in all academic institutions we hope and promise that it will be an exciting and rewarding series after all blockchain is the epitome of the beauty of mathematics ",
        "2": "and it proved how it continues to advance our society and our democracy we recently applied for funding so we'll be able to afford another three or four seminars during the duration of the academic year the next seminar will be most likely on December 14th and we're gonna have addressed part from the University of Toronto and Henry came from York University to serve as speakers sometime in February we're gonna have Silvia McCauley from MIT the Turing Award winner also being one of our speakers were pleased that it is vitalik butylene today to kick off the series and were very gracious for that but before I introduce the speaker us take a quick moment to thank everybody at Phil's in city of mathematics for providing the space the support and the cuddling for today's event so thank you very much everybody applause for making this a reality a few ",
        "3": "words about Vitalik I'm not going to extend where the opportunity him talking at the University of Toronto last April he was born in Kona a short distance outside Moscow - Demetria Natalya he moved to count at the age of five Vitalik is the creator founder and patriarch of ethereum deeply involved with the Bitcoin community and a founder of Bitcoin magazine after receiving a field fellowship he dropped out of Waterloo University at the age of 20 to fully dedicate his effort into the development of ethereum three years after with the contribution of many people and a large ecosystem around the globe a theorem is the second largest crippled economy I hate the word to use the word cryptocurrency crippled economy with a market capitalization that approaches the 30 billion dollar mark he's coined 40 under 40 by Fortune magazine affarin provides a nearly curing complete platform for which other applications can use to build upon it ",
        "4": "and today major commercial corporations Tier one banks and millions of other independent projects exist and based on ethereum trying to make our decentralized democratic future reality Vitalik is from toronto he spent most of his life in Toronto in the past few years he advocates around the world the beauty and mechanism of theorem were very likely to have him today so please give him a world welcome back home yeah so today I wanted to I mean divert a bit from just giving a kind of boring general introduction to a theory I'm talk as a very often ends up doing and and start off with a bit of that but focus much more on one particular area of designing vlog chain and if you're in applications and that ",
        "5": "is the interplay between in aetherium and blockchain technologies in general and privacy so like basically just to start off you know what is the theorem I mean so the simplest way to describe it is that etherium is a general purpose blockchain um so it is a blockchain is you know it's a decentralized computer network that keeps track of information in the same way as systems like a Bitcoin in the same way as systems like a named coin it's a decentralized network that execute transactions but the main distinguishing feature between etherium and other systems is that aetherium has a built-in general purpose quasi turing-complete programming language which basically lets you run any kind of code on the blockchain so just you know you have blocks and you ",
        "6": "also have code right so code on aetherium can do much more than code on other similar platforms the general idea behind aetherium once again is that instead of just keeping track of money or just keeping track of any one kind of application and basically tries to use this and paradigm of what are called contracts in a theory I'm so borrowing from my nick szabo store am a smart contract from about 25 years ago in order to represent potentially arbitrary kinds of application state so basically aetherium the ethereum blockchain keeps track of a set of accounts for each accountant keeps track of a bunch of information the first two are kind of fairly technical for this case use case case not to importance but the last two it keeps are fairly important every account has a piece of code and code is immutable and code is a program and every account has storage and storage is mutable and storage represents information that the program ",
        "7": "can keep track of and manipulate so you can think of aetherium as being a platform that basically simulates a large collection of anak variable powered but autonomous agents where each agents represents basically the rules of some application these agents code and execution is fully transparent which is in some cases a bad thing as gets you later but in some cases it's a very good thing and it's also in foliage transparent vir verified by a very large number of computers across the entire network and it can be used these autonomous agents can interact with each other so you can have applications on new theory and watching they're talking to each other and this could be used across a very wide variety of use cases right so you could imagine a computer program we are this computer program basically in itself represents the ",
        "8": "account balances of a digital token and so the computer program would have inside of the program a yeah or first of all a function and the function will just be called send and the code of the function would say check in my storage so check in my existing database does the value at this particular key representing the sender account have enough money if not then quit I do nothing and if yes then transfer the money to some other account so I mean that's just one simple example but you could potentially imagine these smart contracts being used to represent fairly complex application logic so one example here is just a sphere Li simple 2 of 3 escrow system and so basically this is a contract which can actually hold ether so ether is a kind of need of cryptocurrency that exists inside of aetherium and based on some conditions a it can accept ether and underserved under certain circumstances ",
        "9": "it can send ether so there is an arbitrator he has the right to send to either refund money to the buyer or forwarded to the seller or the buyer can forward money to the seller or the seller can refund money to the buyer and all of these different conditions are expressed in code that would get executed by basically every node that it's verifying any transaction that represents in operation in operation in the system that interacts with this application so that's just a kind of a bit of a taste into what kinds of things etherium does in in general you can think of it as a platform for implementing various different kinds of mechanisms that are executed in a transparent way that are executed in a way that is highly reliable and varied by verified by a large number of nodes that is a censorship resistance that is this very open and accessible and anyone can build and interact with these mechanisms so and in these these ",
        "10": "mechanisms can represent potentially very many different kinds of applications so another important property and again a very interesting one is that these mechanisms that are executed on aetherium can directly control money right so money itself is basically just an application that runs on aetherium so on top of a theorem there is a base token called ether and applications like smart contracts can control ether and they can automatically pass ether around under certain conditions and if you want you can also issue your own token on top of aetherium as an application means applications can interact with this token much like they interact with ether so these are some of the cool things that you can do on top of the platform another but one of the really nice kind of outcomes of the fact that if the OEM is quasi turing-complete so basically lets you do anything that can be computed is that it's also a very ",
        "11": "nice platform for experimenting with many different kinds of forms of new cryptography so this is also going to be part of what I will talk about further for the rest of the talk so in general right what our blockchain spread they're good at ensuring that some particular application state so if for example you issue some token on aetherium the application state might be how many coins this does everyone have at some particular point in time so ensuring that the application state is valid so ensuring that the current application state actually is the result of executing some series of transactions that actually were signed by they're supposed senders transparency of process so not only do we know what the current application state is we also know how it got there and irreversibility so basically once a transaction gets committed and once the effects of the ",
        "12": "transaction are committed you can't go back right so you can't swear kind of you can't revert the transaction and you can't just make the transaction disappear you know once it's once it's finalized it's finalized these are all things that block chains are really nice at and one of the ways that block chains achieve this property is basically because you have a very huge number of nodes verifying everything right so the etherium network is made up of something like twenty five thousand nodes that are scattered across the entire world and some of these remaining nodes and but also some of these are basically non-mining foe nodes so if you are a user of the etherium network then you yourself can run a node which basically verifies all of the activity that's happening on the chain so you know the fact that basically you have 25,000 policemen watching over every single operation gives you very very high security but this has a cost wall chains are less good at number one scalability ",
        "13": "number two privacy both of these are very very interesting topics and if I was asked to give a presentation about scalability I could probably talk pretty much all the way until my mouth my mouth gets sore and then drink some water and talk even more but I mean the for the interest of saving let's focus specifically on the second problem so the further problem of privacy so a block chain including Bitcoin including namecoin including dogecoin including aetherium is a fully public ledger it's a system where anyone can see any transaction which gets published to the blockchain and anyone can see the effect of any transaction that gets published to any application state that it that's being recorded inside of aetherium so in this particular case this is a full a transaction that's going to the etherium foundation multi-sig wallet so this is a ",
        "14": "contract that stores the etherion Foundation's money and the contract has a four of seven policies so they're seven keys and if you have four of these keys than you can authorize a withdrawal and so in this case there's a transaction that was sent in this transaction is the one that actually does authorize a withdrawal and you can see it has an effect that one thousand gets moved from the foundation and clearance to another account so basically anything that you do on the etherion blockchain you know which is you know is a completely public operation this is in in some cases good so the transparency helps guarantee integrity of process in very often transparency of specific parts of the process or transparency of specific outputs of process execution is highly desired same one simple example let's say you wants to create a voting system on the blockchain um so you know let's say you know you or you wants to you decide that you know you wants to just ",
        "15": "move all of your voting onto the internet because you decide that and like if you do it this way then you know if especially if you do it on a blockchain it'll be very easy to see first of all it'll be very easy for any individual to verify that their vote was counted and it will be very easy for everyone to see that if you actually take the results of all the votes together that the outcome is what you know I'd be what the person running the election says it is so and you know theoretically you don't really kind of need it to even have a person kind running the election so to speak with the exception of basically needing someone to act as an identity Oracle to say who uh which which cryptographic keys can and can't vote so transparency is for many purposes a very good thing but and you know there are plenty of use cases for this voting charitable organizations might wants to voluntarily open up their far their flow of funds government organizations might wants to ",
        "16": "do the same thing so in actual use case I've talked to at least three government or governments about is basically this idea that you can use a state-issued cryptocurrency that would exist only inside of the government basically in order to track all payment payments going from payments that occur inside of the government going from tax collection all the way up until the point where the government government makes expenditures fun signaling theory effect when someone says at least three they usually mean three so your transparency has good things about it what's not good about transparency if you know someone jets someone's address then you can pretty much track how they spend their money if you know someone's at someone's address so address in this case just basically being a cryptographic string of bytes that represents kind of the digital location of your particular application in the ledger if you know someone's ",
        "17": "address and you already know who who they send money to the and then you know someone else's address so if I know Alice's address and I already know and that Alice has some kind of relationship where she frequently sends money to Bob and I see that Alice's address sends some some coins periodically to some other specific address then I know that that specific address goes to Bob so basically address the anonymization is contagious the more addresses you've already done on mised the easier it becomes study anonymize addresses even further so there's been years of research on this and theoretically you can do even more complex mathematical analyses you can do things like graph so morphism analyses you can do missed various kinds of statistical checks you can do machine learning you can do you know just lots of different things and very often d anonymizing a large portion of basically which address corresponds ",
        "18": "to whom turns out to actually be quite doable um and this is true for financial applications and it's true for non financial applications that end up using the blockchain as well so for many use cases this is a problem if you have an election on the blockchain then first of all you wants the ability for everyone to be able to verify for themselves that their vote was counted but you really do not want a system where everyone can see who everyone else voted for i mean hey you voted for the blue party you're fired hey you voted for the purple party i'm gonna give you $20 based you know lots of exploits if if voting becomes that transparent so we've wanted voting is selective transparency all right we want transparency in order to get cryptographic guarantees about specific aspects of the process but we definitely do not want the entire process to be a ",
        "19": "transparent one and it turns out that no with cryptography we can actually significantly improve things so you know what can we do about it right so there are several different kinds of privacy technologies that can be combined with block chains and what they range from kind of the low tech to the high tech right so in general one of the big reasons why of cryptography specifically is such a good match for blockchain technologies is that block chains give you things like security and integrity of process and a transparency of process at the expense of privacy in cryptography is perfect for giving you the privacy back so we'll start with the low tech things so mixers I'm so the idea behind a mixer originally came well in it existed in one of the cryptography space for decades but in the cryptic ",
        "20": "see space they first showed up in Bitcoin basically as a simple in centralized solution to bitcoins privacy challenges so these these mixers tend to be fairly advanced they tends to have really nice you eyes so basically what do they do right so this diagram should hopefully explain most of it you have a bunch of guys each of those guys sends one Bitcoin to Bob then then once while sending their one Bitcoin to Bob each of those guys specifies what their what their preferred destination addresses Bob takes the bitcoins and Bob refunds the bitcoins to the destination addresses now what what's you get here well if you throw a Bitcoin in then you get a Bitcoin out to an address that basically the public in general does not know about so the link between the input ",
        "21": "and the output is K is broken it's not it's not public it's not a record on the blockchain and so this gives you a privacy gain but security properties mixers have strong privacy if you trust Bob so if Bob over here is actually collaborating with the FBI or if Bob is collaborating with the blue party or if Bob is collaborating with whoever you want to just like protect your privacy from or if Bob just happens to be as incompetent as Equifax and get hacked then you have a problem second you keep your money if you trust Bob so if Bob is as incompetent as Equifax then it may well be the case that the hackers won't even bother with just revealing the links they'll just take all the money they'll just basically just wait for a bit of really big rounds to go through the mixer and we'll just take all the coins for themselves so this basically these are and of the two ",
        "22": "security limitations right and the third one is that it requires ongoing use in order to maintain privacy so can we go beyond just trusting a central authority now in some ways you could even describe the entire science of cryptography or possibly the entire mathematics of cryptography as being an attempt to achieve outcomes similar to what can be achieved by an ideal perfectly trustworthy central third party without requiring that central third party to be there or possibly requiring a third party to be there but in requiring less trust in that third party than was required before so can we do better and it turns out that we can so first of all one another kind of still fairly low tech but somewhat higher tech form of privacy preservation ",
        "23": "on blog chains is a technology that I a general category of technology that I call interactive security and this includes payment channels state channels lightning Network write in plasma just basically everything that exists in that category and all of these interactive technologies tends to rely on us on a fairly simple principle the idea is do not use the blockchain for every single transaction instead you try to conduct as many transactions as possible in various second layer systems that exist off chain but these systems have the property that if one of the participants tries to cheat then the other participant has the ability to publish all of the evidence on chain and actually be able to get their money back so most of the time the blockchain does not get used but if someone tries to cheat then the blockchain kind of acts as a court of last resort and basically forces a fair outcome now because the ",
        "24": "blockchain exists to force a fair outcome of someone tries to cheat there is no incentive to cheat and so most of the time the system works very efficiently but if there is an attack that tries to happen then the systems efficiency degrades but you still get the exact same level of security so this was originally conceived as a scalability technology and there is plenty of papers you have research on these kinds of technologies but it's also has a really nice secondary benefit which is it can be used to increase privacy so why does it increase privacy well basically because most of the information does not get published through the blockchain by default if we use some kind of second layer system some kind of channel some kind of plasma network to send transactions between each other and we send fifty thousand transactions then we take our money out and we'll straw then ",
        "25": "the transaction where you take your coin from outside the system and deposit it into the system is still on chain and it's still public the transaction where you take the coin out and use if annual straw it is still public but everything that happens in between is completely private the only case in which it becomes public is if there's a dispute but if there's a dispute then if the then the other guy has the ability to publish all the information anyway so it actually does achieve basically close to the best possible privacy guarantee that you can still watch that you can still achieve under the circumstances yeah so this is just one kind of really nice really nice improvements to have right uhm so now from here we can go into somewhat higher tech systems right so the really nice thing about mixers is that you don't really need to have much technology to implement them you just need to have Bob Bob needs to have a website and the website needs to have a REST API now if you wants to build a ",
        "26": "state channel then you do needs to do a bit more coding but from a kind of cryptographic and a standpoint the kind of math that you need is totally knocked not that complex the complexity is mostly in and if optimizing the exact way in which these systems are constructed composed with each other optimized in order to achieve the best possible outcomes right so basically try to really maximize you know as a ratio between the capacity of the base chain and the capacity of the base chain plus all the second layer systems now there are also a set of more powerful technologies and these more powerful technologies however rely on a but you know substantially more complicated cryptographic magic and there's a few different kinds of cryptographic magic that could be used to create privacy-preserving applications on a blockchain the first one that I'll talk about briefly is our ring signatures so ",
        "27": "here's the original motivating use case for a ring signature suppose that you are a diplomat and you want to leak the contents of a trade agreement because you know it basically you believe that just this is something that the public deserves to see because you know it was and because he wants to just make the decision around the agreement more democratic or whatever reason you have but us a diplomat also do not wants to be punished so you do not want to be penalized by your government you also do not want to lose the opportunity to see more trade agreements in the future so you wants to week.the the trade agreement and you want your week to be credible but you do not want yourself personally to be implicated and so how can you do this well let's imagine that each and every one of these diplomats because we're living in the future has a public key so has a cryptographic private key a cryptographic public key then the diplomats can create a special kind of cryptographic signature called a ",
        "28": "ring signature that proves that the diplomat is one of some set of people so in this case that the diplomat is one of the set of people that was actually supposed to theoretically have access to the trade agreements but reveals zero further information about which of these people is the diplomat sounds magical can you do it it turns out that you can so the math behind the way a rank signature works is definitely more complicated than a but then Bob the mixer or a state channel but the simple kind of three sentence description is that you a ring signature relies on these kind of one-way hash functions that get in fact that can be inverted if you have one particular private key and so the idea is that what a ring signature is it's basically a series of numbers where the second is the hash for the first of third is the hash of the second the fourth is a hash of the third all the way up until the point where the first is also the hash of the last so you ",
        "29": "actually have a loop of numbers the kind of hash into each other with normal hash functions it's impossible in the reason is that in order for something like this to be possible like basically you have to be able to invert one of the hashes to be able to make a loop and now it turns out though with a rigged signature well it uses a special kind of hash function where if you have at least one private key then you can invert the ring in one place and that's all and that's already it's enough information it is all that it takes to create a loop so if you have a private key then you can invert one of the hashes and let this watch you create a loop if you don't have one of any of the private keys then you cannot create a loop if you can create a loop every loop looks just mathematically just like every other loop so in they're mathematically distinguishable from each other and this basically preserves the privacy property so yay so every point in this loop can be one of the diplomats the diplomats can make a ring and no one knows which ",
        "30": "one you know basically which point which one of the public key is actually is the one that created the signature this gives us exactly what we want there is a further kind of rank signature which it turns out is actually even more useful for our blockchain use case it's called a linkable ring signature so what is a linkable ring signature basically the idea here is that it works just like a ring signature except it weeks a special kind of information that you can call a cryptographic trace and in something usually it's called the key image and the cryptographic trace basically gives a bit of information about which member in the ring signed it now how much information exactly well here is the precise mathematical property that you get the cryptographic trace by itself is completely useless for determining which key which of the key is it is that signed it there is absolutely no way to take the cryptographic trace and recover ",
        "31": "the public key or recover the private key and there's also no way to take the public key and the trace and recover the private key now what there with the property that you do have however is that if you try to create two linkable ring signatures with the same key then those two linkable rig signatures will have the same trace and so the fact that the same key was used to sign twice can be detected what's the use case for this the most uh one of the simplest ones to explain is actually voting right so if you wants to have a voting system that has a bit more privacy preservation then you can create a voting system which first of all basically where every single vote is a yell linkable ring signature so instead of just voting in the most naive way where you just digitally sign a message you would make a linkable ring signature is ",
        "32": "containing containing yourself and a bunch of voters this has the property that number one people can because it's a ring signature people can verify that the signature actually was made by someone who is in the set of eligible voters number two if it's published in the blockchain then you as a voter can verify who you've uh that your vote was included and number three it's an anonymous because you don't know which specific no one else knows which specific member of the ring signed it and number four it's some because it's linkable you still have the property that a person cannot vote twice if a person votes twice then there to resync matures will have the same trace and the second one will be rejected so this is just one example of how you can combine together the transparency process integrity and proper process transparency and safety properties of a blockchain with the privacy properties of cryptographic algorithms to create ",
        "33": "systems that have some of the benefits of both you can also use this for better mixers so we can take bobs here and we can put Bob out of business and instead of having Bob in the middle we just have cryptographic magic in the middle yay technological unemployment so what do you get from a cryptographic magic well first of all Bob does not have the ability to steal money because Bob is now just a smart contract Bob is just a program running on the blockchain right and the second thing that you get is while you actually get a system that properly preserves privacy because even there because Bob is a smart contract and so there is no way there is no central party who has the ability to basically betray you and give all your money to the blue party or or rather tell the blue party who you voted for or tell the blue party who you sent your money to so this is nice here is another ",
        "34": "interesting use case of our ring signatures Kim binds together with blockchains identity Oracle's so the general use case is this basically imagine a person P approves the entity X that they are a unique human so this could be done with cell phone verification it could be as it could be some passport verification system it could be even a video call it could be able you know whatever mechanism and they might also approve some other things they might want to prove that they are a citizen of country Y that they are not a citizen of country said you might for legal reasons you might want to prove that you're not a citizen of North Korea Iran Saudi Arabia or the state of New York you know among other things right so then let's say person beads at this approved all of this to entity X and the X adds P to an on chain whitelist so to a whitelist that exists on the blockchain this whitelist can ",
        "35": "then be used by third party blockchain applications and smart contracts that require this notion of identity verification so for example you might want to offer on the blockchain some regulated financial service that requires you to not not allow this service to people of some particular country there is also various kinds of mechanisms that requires a notion of civil resistance so there's various kinds of mechanisms that require the property that one person should only be able to have one count there's so one example of this is something like quadratic voting we are like basically the idea is that you can vote n times by paying n square dollars and this has a whole bunch of very cool reasons why it's why it's optimal for various cases but if you have this kind of system and you can just split your vote among and accounts then you can basically multiply the effect of your vote by a factor of n for free so for this kind of loophole not to exist well you want to have some kind of one as ",
        "36": "some kind of one account per person system so identity Oracle's can basically be a kind of centralized solution or possibly can aggregate different entity Oracle's together make it partially decentralized as a way of solving these kinds of problems so regulatory compliance I'm excluding individuals or specific countries limiting the amount per person so maybe you are just ideological egalitarian and you wants to build a system that does something like a free airdrop or you give $50 of some token to every person who wants to claim it maybe you want to you know make a voting system and give one vote to every person and a civil resistance cell quadratic voting potentially making things like online polls more secure resistance to simple attacks the problem with this is basically that these identity Oracle's do not have a good notion of privacy right so if you go to Bob and you prove ",
        "37": "your identity to Bob and Bob puts you on a waitlist Bob then no it's every single thing that you that you do with that identity can we once again technological unemployment well actually no in this case Bob gets to still be employed but can we at least deny Bob the ability to see every single thing that you specifically do right so can we reduce Bob's power a bit the answer is that we can in one simple way that we do this is once again basically by taking this identity whitelist and shoving it the real rank signature mixer person P proofs the entity X at the ARRA bla bla bla into the X adds p2 and on chain whitelist W then person P publishes a linkable ring signature on the blockchain proving membership in W so person P publishes a linkable rate signature that proves that they are one of these members of W not saying which one but it's a link but it's a linkable ",
        "38": "signature so you can't do it twice a smart contract on the blockchain verifies this signature in the smart contract administers a whitelist W Prime where basically the W prime is a while list and in fact if everyone participates W prime has in service of form and service of identity is the exact same membership as W but they're the the link between the two is broken so even though you know that there is a bijection there is a one-to-one correspondence between members of W and members of W prime no one knows exactly what the correspondence is no one can tell this that this particular account in W prime corresponds to this particular account in W and so even entity Exeter operates W has no idea what any specific person is doing so this way you get all of these benefits of identity plus all the a lot of these benefits of privacy put together Y a ",
        "39": "marginal improvement from the first time in history we can have fully privacy-preserving simple resistance fully privacy or preserving proof of being a Bob Loblaw and this is all done thanks to number one cryptographic technology is why great signatures and number two the rule of the blockchain here is basically just storing these cryptographic traces and storing the whitelist and basically ensuring that you actually do have this one one correspondence property and there actually is code for this that's already been written so theorem had a heart for about three days ago called Byzantium and actually I think these it's about six days ago now we are we added support for the cryptographic operations that are needed in order to actually implement some rank signature ZK snarfs so this is the second major piece of kind of cryptographic mathematic that can be helpful to a blockchain application designer that cares about privacy ",
        "40": "Ziqi Starks in the most general sense to this it's a proof that you know some number X which satisfies f of X equals y so f and y are public so this is public this is public X can have secret parts they can have public parts if you want you can make X Foley public if you want you can make set X Foley private and if you want you can show part of it a part of X and hide part of X the size of this group to graphic proof is 288 bytes no matter how big X is no matter how big Y is no matter how complex FF is the size of one of these proofs is only 288 buttons it's constant size and the proof can be verified in constant time even if the function f takes hours to execute now there is an wa again prove aside overhead with a large constant factor so expect making a proof of f to take thousands of times more than actin just computing f by yourself but the upside ",
        "41": "is if you compute it once then verification is basically instant or at least it's close to instant if you want to learn more about the gory math of how this works I wrote a bit on a bunch of blog posts about it it's fairly complex but I'd encourage people who are interested to learn about it so basically and you know what exactly does this mean to you all a person right so what does this mean like X Y F like basically what does this actually give you well basically whatever you can think of it you here's just one simple exponent a kind of lame an explanation of what F what is zero knowledge proving f of X equals y gives you suppose that we have a blockchain where everybody's account balance is encrypted so account balances are fully private and transaction values are also fully private suppose that I then matiee wants to procreate a system where despite all of this encryption transactions can ",
        "42": "still be verified how do I do this well a transaction would probably have a few different maybe five parts to it it would say before I had the AMA this number of coins and the number of coins is encrypted before the recipient had this number of coins I sent this number of coins after I have this number of coins and after this was the recipient has this number of coins all five of these values can be encrypted and what you can do what the zero knowledge proof is you can say well X over here is a bunch of encrypted data what F is gonna do is F is going to be a function which takes all these values decrypt them so we include the private key in X but we make the private key be one of the secret parts of X so f is basically just a function that verifies that all these numbers match up with each other so f is a verifier that says if you decrypt this transaction and you check whether the whether or not this transaction is valid then the result ",
        "43": "will be yes so in this case we you could say one representing yes so basically zero knowledge proof so what you prove that a an encrypted transaction is valid without revealing any of the details about what the specific numbers in the transaction are theoretically you can use your knowledge proofs to do something that's very similar very similar to a a ring signature in certain ways right so basically if you want you could actually replicate all of the same math as a reg signature and you can just do it with zero knowledge proof so you can make the trace be the hash of your key you can sign something which is the hash of your key with something else and you can verify that you know what basically this particular transaction actually was made with one of these keys and by the way this is the true this is the trace of one of these keys but I'm ",
        "44": "not gonna tell you which one so these are all things that can be done will see on a with C key snarks right Z key Snorks are this kind of technology which is a superset of basically a whole bunch of cryptography put together now the benefit that you get is an extreme level of generality the cost that you have to pay is that these proofs are slow to generate endless slower to verify so use cases basically you can do things like proving integrity of process so you can prove that some particular that the current application state actually is one that was reached through a set of valid operations but you can hide any particular thing that you want about the specific operations that got you there you can have a transparent state with encrypted transactions you can have an encrypted state with encrypted transactions you can have an encrypted state with partially encrypted transactions you can have a partially encrypted state with partial we encrypted transactions whatever you ",
        "45": "wants to hide you can hide whatever you wants to make transparent you can make transparent and Zekey snarks allow you to cryptographically verify that even the hidden parts are being computed correctly so this is kind of the really nice thing that you get here right now seeking Starks definitely don't hide absolutely everything so for example one a few ugh Ziggy Starks do not hide the fact that a transaction was sent they do not hide when the transaction was sent and they don't hide the IP address the transaction was sent from but if you really want so you can use systems like tor to give you privacy for that too so this makes them in some ways really the ultimate kind of partner technology to block chains they have a bunch of limitations they do take a login to verify so but you know it's a nice technology all around so what can you do with privacy technologies right so we talked a bit about different kinds of privacy technologies that you can use together with block chains what can you actually do with them well right now you ",
        "46": "can start thinking about low-tech ways to improve privacy think about things like using different accounts for different applications start thinking about state channels mean start thinking about things like plasma interactive security ring signatures so if you if you are a good a cryptographer then you can definitely try your hand at implementing a ring signature mixer on the blockchain and later on basic zqij Snorks zero knowledge proof and other fancy spoofy stuff and the tools for all of this are basically all coming around the corner so not be basically you know like blockchains are in open platforms so if any of you wants to start experimenting or playing with any of the stuff then you know you're definitely very highly welcome to and I think this in general Nick it's especially with some of the features that we've added was the reset with the recent hard for can by say and Timmy ",
        "47": "really does give you this kind of playground of you know just all of the basic mathematical building blocks that you need to build a lot of these systems you have the number arithmetic you have elliptic curve addition elliptic curve multiplication will up to curve pairings and you know you have hashes you have signatures basically already just enough stuff to create enough tools in the toolbox to create potentially just men you know a very very large set of cryptographic protocols just I mean the one thing you want to keep in mind of course is that the blockchain itself is still a transparent public ledger and so the blockchain itself can't keep secrets so the blockchain can keep encrypted I can keep hashes of data you can keep encrypted data but the blockchain itself cannot keep secrets and compute on secrets but if you keep that limitation in minds then there's still a very large set of interesting things that you can do um thank you [Applause] ",
        "48": "so what would the heartbeat be doing so what do you mean by throwing away a hash what do you mean by throwing away a hash every block okay so is basically the idea that you're saying that you would have a contract and you would just flood it with a bunch of transactions in this ",
        "49": "way you would get even more privacy about what the actual operations are oh it's you right oh yes and then if all if all the transactions are encrypted so you can't tell what's meaningful and what isn't yeah no that's a definitely one good way to make a privacy improvement I mean the one the one drawback is that this does flood the blockchain with transactions which is expensive but I mean actually the thing that you can do though is that if there's a bunch of people that all wants to use this kind of technique then they can probably all kind of try to share a mixing pool but yeah you know this is definitely the sort of thing that would be good to research more yep yes yeah so if you take the kind of very ",
        "50": "simple use case of moving money from A to B so the unit that the etherium block chain gets it uses to measure computational resources is called gas which you can think of as being an abstraction for things like bytes and computational steps and a few other things put together the yum a regular transparent transaction takes twenty one thousand gasps is your ring signature transaction goes up to about four hundred thousand and a sneaky stark verification goes up to about 1.7 million now this is this is all now and it may well be paused to be the case that these things are all going to go down in the future as the implementations of the cryptography get optimized but that would come later yeah yeah so it's in general I think ZK snarks are definitely still much cheaper ",
        "51": "than homework encryption like basically all of these kind of technologies that do cryptography over general-purpose circuits all do things alike compiling everything down to arithmetic circuits and then if you have comparisons kampala compiling it all the way down to boolean and then for every single one of these operations you have to do a hash and elliptic curve up to curve operation or like something like an FFT so it gets very expensive for all of them but Ziggy Snorks are these they like my opinion is that they are close to as he fishes as you could get given these constraints but as far as practical and for me examples go I think verifying a GG snark proof in C cache takes these days or or sorry creating a approved takes something like five seconds and verifying one takes maybe five milliseconds and sepal in like an optimized C implementation maybe 15 milliseconds and go yeah ",
        "52": "yeah so randomness on the blockchain is a very hard problem and so one important thing to keep in mind is that achieving synchronous randomness is basically provably impossible and the reason is that with synchronous randomness what you can always do is you can always basically simulate a transaction locally and if the random or what a miner can do is a miner can simulate locally and if the randomness is favorable then they can then they can send the transaction that like makes it better does whatever thing based on the randomness and if the realness is unfavorable then then do nothing in wait and wait it'll an x-block so synchronous randomness is always exploited but what you can do is do a asynchronous randomness right so basically step one ask a mechanism for a ransom number step to wait a bit of time and then step three it doesn't call back that gives you back to the ransom number and in the meantime there's some mechanism that generates it I know there are a couple of teams that are working on different kinds of random a mechanism so there's something called R and L there's another mechanism based on a ",
        "53": "sequential a proof-of-work function so basically time log functions and there's a few other things I mean it is definitely a very interesting area of research yeah okay no so the miner does not have all the information the question sorry okay so the question basically and as like like the last party I was like in in this kind of system does the miners still have all the information and the answer is Dell nobody has the information there are zero trusted parties in any of this ",
        "54": "yes yeah so first of all this depends on your economic model so whether the security of a blockchain is paid entirely by transaction fees or by inflation so I think in the long term we're definitely moving towards something closer to security being paid purely by transaction fees and it definitely is the case that I'm off chain systems reduce transaction fee like the transaction fees from the applications that are there but the thing that you have to keep in mind is basically like basically like you have to really look at the shape of the supply demand curve because basically you like what state channels and ",
        "55": "interactive system is the u.s. they reduce the average transaction fee by maybe a factor of 100 whenever you reduce the price the supplied to me an equilibrium always shifts to the right the question is that a shift to the right by a factor of western 100 100 or more than a factor of 100 theoretically it's very possible that the supply demand equilibrium will shift right by basically so much that the increase in volume will more than make up for the loss of revenue for each individual user so but you know this is still totally completely indeterminate and may be true sometimes maybe not true at other times yeah basically the idea is that the specific form of proof of sake that we're using depends on every validator in the system sending a of a vote that gets processed by the blockchain every 20 minutes and so if there were like base if the ",
        "56": "requirement for ether was much lower then the amount the number of validators would be very high and this would impose a very high overhead on running the blockchain and so we were just trying to minimize this that's it yes yes yeah right so the way that I think about this is that the first question right is that our transaction the transaction fees that would exist naturally in a kind of you know just an unrestricted where environments be enough to pay for security yes or no if the answer is yes ",
        "57": "then great and we just don't need inflation if the answer is no then that means that we need more revenue to fund security and there's two ways to do this one of them is to restrict supply in order to artificially drive up transaction fees and the other is to increase inflation and you can do some economic analysis and basically you can economically prove that like just because deadweight loss is pretty much is pretty much always quadratic the optimum of the optimum is to do some of both right so but my the general instincts though is that you actually do want to do that then you do want a substantial portion of the extra revenue to actually come from inflation instead of coming from transaction fees that said oh this that particular model assumes that using the base cryptocurrencies as a store of value is one of the primary use cases of the blockchain but if you have a system where it's much less about the store value and it's more ",
        "58": "about the applications then the optimum does shift toward a bit more transaction fees in a bit less inflation so in it it does depends on the use case and like actually figuring out the optimum probably as a hard econometrics problem yes yeah so for proof of stake implementation actually I think the easiest thing would be to just go here and I can just show a few links but basically we have had some very substantial progress particularly on on the proof of stake paper so we've been working on a Kasper paper over the last a few months and III search you can go over here mmm and then this is our c1 ",
        "59": "but there's probably but there's gonna be a later version so this is the paper form Kasper differently finality gadget which is the hybrid proof of state consensus that we're trying to incorporate so basically you can see how it describes the basic mechanism it describes some of the safety proofs let's see if I can actually find the safety proof in a in a nice pictographic form they were there we go so I definitely would encourage people to go to this website and just see if actually read through the paper and feel free to provide comments we are in the you look very actively seeking comments and like basically anyone if anyone here is doing it is into a distributed systems Theory fault fault tolerance visiting visiting fault tolerance then and there's a high chance that you will enjoy this and as far as scalability goes we have active ",
        "60": "prototypes so if you go to github.com forward slash theory um forward slash sharding then you will find a bunch of stuff being worked on here so yeah I mean there is definitely very substantial progress that's being made especially on the proof of stake side so we've managed to make the proof of stake protocol extremely simple at this point where it's basically just one type of message one condition for a one condition for detecting bad behavior and just and one other requirement and one like a just very simple safety and aliveness proofs so I would consider that look almost complete from academic standpoint but it still has to be implemented and checked over and a scale with sharding is probably is a bit further away but still moving fast yes I have no idea yes um so first of all the ",
        "61": "randomness that you can get from block hashes and proof of work is still fairly weak because like basically the strength of that Rev of that revenue is only a straw or the strength of that randomness is only as strong as the revenue that you get from mining right like if a miner wants through they can basically make a block and if the block D has a favorable number they can publish it and if it doesn't give a favorable number then they cannot publish it and they just sacrificed the revenue so like in general I actually think that proof of stake based randomness system so things like a R and L are potentially much more secure and I actually encourage you to go look through I ran down let's see if I can this is just like one simple idea ",
        "62": "of what on chain randomness can look like github brandão ran'tao mm-hmm there we go it's got readme is there basically it's kind of it's kind of like an N event commit reveal scheme mmm you know you have that Chinese read me as yeah just like strongly encouraged you to what can look that up yes yeah so this is one of the reasons why and we're interested in Casper because kind of basically the it makes the economic finality curve go up much much more ",
        "63": "quickly so basically Aggie idea would be that under normal circumstances you would get what you could consider full security after only about thirty minutes which has look much better than proof of work where the economic level of security only goes up linearly with time the so that's one thing that we're doing but then even that saw obviously has its limits right so if for example you have a blockchain where the total value of assets being traded on is maybe a hundred billion dollars but the total value of ether is ten million dollars then that's also kind of a very lopsided and insecure systems because the incentives to attack it will be much higher than the Sun the cost of an attack so you know what basically it is important for security to ether to maintain you know it's basically from the value of ether versus the value of everything else on the block change did not get too unbalanced yes ",
        "64": "I would say the main thing that I would focus on mores paralyzed ability like I feel like the current version of aetherium is very bad from a paralyzed ability standpoint and there actually are some fairly simple protocol and architectural changes that could be done to greatly improve paralyzed ability yeah that probably we are going to end up implementing over time but that would have been basically easier to implement how do we knew about them from day one yeah um yeah so first of all I would HIGHLY encourage enterprise users to walk through basically the exact same privacy technologies as the public chain stuff right so if you look at basically look at these kind of two these two party channels as far as the first step then look at look at plasma so plasma is ",
        "65": "one of these interactive security technologies and it actually is a way of making a private chain which is still backed by a public chain for security then look at zero knowledge proof sin rank signatures I know quorum which is a JP Morgan some aetherium based consortium ledger is already working with the C cache team on incorporating those things at SL which is one particular implementation of like basically smart contracts that compile down to seek a star clarification and there's also other similar technologies that you the same thing that we're working on yeah yeah so most theory of enterprise implementation ends up happening in the community outside the foundation so there are generally two major implementations that enterprise people ",
        "66": "tends to use if they want in a theory and based route permission chain one of them is tenorman's and the other is something called Istanbul which was created by a guy team out of Taiwan called Emme so I'd encourage looking at looking at both of those and so be the tends to just work fairly well give scalability up to about a thousand transactions a second as I understand and then beyond that like basically an enterprise's would benefit from of what also very similar things to what the public chain benefits from so both benefit for a formal formal verification both benefit from zero from ezekiah Starks both benefit from channels both benefit from better security technologies so in that sense the tracks new tends to be fairly parallel to each other yeah like there so optimizing hardware for aetherium itself doesn't make much sense that what ",
        "67": "might make sense though is creating application-specific integrated circuits or at least FPGA is for creating as your knowledge proofs and although actually as I've been told like even appearantly the existing as the key starka prover implementations are still on CPUs so you could all possibly just get a huge speed up just by rote by moving to GPUs but for more complex computations you might need more memory so just in G look the problem is that a lot of the general-purpose cryptography is just I know for unavoidable mathematical reasons it's it has high overhead and so creating specialized hardware for it might be a good idea there is also hash verification and signature verification so those things are all important and then the other important piece of hardware that is relevance the blockchains is basically secure hardware that would contain private keys so basically all of you things like true ",
        "68": "basically trusted hardware modules that would contain private keys and be tamper resistant stuff for things like hardware wallets so I think both of those categories are useful yes it doesn't have to match but basically if the ratio bits of everything that's being transacted on aetherium divided by amount of ether at stake in the Brewers stake system gets too high then it becomes sided in the security of the system becomes a risk so running also running a fiat a major fiat currency on the etherion blockchain tomorrow is a very bad idea in part for the specific reason yes I would say invest more in ",
        "69": "security technologies so this includes formal verification it includes better programming languages and includes better standards so we've been we have multiple form of your vacation efforts we also have a a new programming language that we're working on called Viper which tries to take a somewhat more restrictive path than solidity in order to improve security and there's actually a team that's looking to formally verify it so this is another thing that we're looking to do and there's formal verification happening for solidity and there's a couple of other languages as well and aside from that there is just simple best practices stuff like not shoving a hundred million dollars into an untested contract without doing a real a lot of work before to make sure that it's good okay how many meeting you one more you're the ",
        "70": "lucky guy yeah so there's a couple of reasons why regular languages are in my view completely unsuitable for smart contracts one of them is that for smart contracts on a blockchain you want the output to have as small a size as possible and C proxy programs even just a really basic dumb C program has about four kilobytes of junk in it I'm so like they're just not designed for this use case where ever you every single byte is precious another thing yes that smart contract code needs to be fully deterministic a third thing is that there are a bunch of small design decisions that are important to make that are different when in a smart contract versus regular programming basically because smart contracts needs to care much more about security and smart contracts needs to ",
        "71": "care more about basically making it hard to write miss winning code so there's a bunch of really stupid stuff that you can do in C++ like B arounds pointer arithmetic overflows like macro is just general craziness that isn't by Pena just totally unsuitable for writing smart contracts and so making a new language from the start that forbids those kinds of things if it forces you it's a patters that are safer is probably a good thing [Applause] [Applause] "
    }
}